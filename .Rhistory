classe = factor(classe, levels = c("I", "II", "III")),
tachas = factor(tachas, levels = c("Sim", "Não")),
regiao = factor(regiao, levels = c("Centro-Oeste", "Nordeste", "Norte", "Sudeste", "Sul")))
# p-valor function format
pvalue <- function(x) {
ifelse(x < .001, "p-valor < 0.001", glue("p-valor = {sprintf('%3.3f', x)}"))
}
bind_rows(
tibble(variavel = "relevo", descri = "Características de relevo da região", respostas = "Plano, Ondulado ou Montanhoso"),
tibble(variavel = "classe", descri = "Classe da rodovia", respostas = "0, I, II, II ou IV"),
tibble(variavel = "vmd", descri = "Volume médio diário", respostas = "VMD"),
tibble(variavel = "tachas", descri = "Presença de tachas refletivas ao longo da via", respostas = "Sim ou Não"),
tibble(variavel = "nfaixas", descri = "Número de faixas", respostas = "Número"),
tibble(variavel = "regiao", descri = "Região geográfica da via", respostas = "Centro-Oeste, Nordeste, Norte, Sudeste ou Sul"),
tibble(variavel = "area", descri = "Área da via", respostas = "Metros quadrados")) %>%
datatable(colnames = c("Variável", "Descrição", "Respostas"),
options = list(dom = "t"),
rownames = FALSE, caption = table_nums("famsi", "Variáveis explicativas"))
shiny::tags$br()
dados %>%
plot_ly() %>%
add_boxplot(y = ~preco, x = "", name = "boxplot") %>%
add_markers(y = ~preco, x = "", text = ~amostra, hoverinfo = "text", name = "outlier",
data = dados %>% filter(isOutlier(preco, 1.5))) %>%
layout(yaxis = list(title = "Preço")) %>%
config(displayModeBar = FALSE)
dados %>%
summarise(`Média` = mean(preco),
`Desvio padrão` = sd(preco),
Mediana = median(preco),
Iiq = quantile(preco, c(.25, .75), names = FALSE) %>% diff()) %>%
melt() %>%
datatable(colnames = c("Medidas", "Valores"),
options = list(dom = "t"),
rownames = FALSE, caption = table_nums("precosisum", "Medidas resumo da variável preço")) %>%
formatRound(columns = "value", digits = 2)
shiny::tags$br()
dados %>%
plot_ly() %>%
add_boxplot(y = ~vmd, x = "", name = "boxplot") %>%
add_markers(y = ~vmd, x = "", text = ~amostra, hoverinfo = "text", name = "outlier",
data = dados %>% filter(isOutlier(vmd, 1.5))) %>%
layout(yaxis = list(title = "VMD")) %>%
config(displayModeBar = FALSE)
dados %>%
plot_ly() %>%
add_boxplot(y = ~area, x = "", name = "boxplot") %>%
layout(yaxis = list(title = "Área")) %>%
config(displayModeBar = FALSE)
dados %>%
select_if(is.factor) %>%
names() %>%
map_dfr(~ freq2(var = ., data = dados))
dados %>%
select_if(is.factor) %>%
names() %>%
map_dfr(~ freq2(var = ., data = dados))
dados %>%
select_if(is.factor) %>%
names() %>%
map_dfr(~ freq2(var = ., data = dados)) %>%
datatable(rownames = FALSE,
colnames = c("Variável", "Categoria", "N", "%"),
options = list(dom = "t"))
dados %>%
select_if(is.factor) %>%
names() %>%
map_dfr(~ freq2(var = ., data = dados)) %>%
datatable(rownames = FALSE,
colnames = c("Variável", "Categoria", "N", "%"),
options = list(dom = "t", pageLength = 15),
caption = table_nums("tablesi", "Frequências das variáveis qualitativas"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
require(magrittr)
require(dplyr)
require(readxl)
require(ggplot2)
require(plotly)
require(DT)
require(reshape2)
require(captioner)
require(glue)
require(purrr)
require(tibble)
require(rthop)
fig_nums <- captioner(prefix = "Figura")
table_nums <- captioner(prefix = "Tabela")
dados <- read_xlsx("Sinalização - Base de dados - v2.xlsx", sheet = "dados")
dados %<>%
mutate(relevo = factor(relevo, levels = c("Plano", "Ondulado", "Montanhoso")),
classe = factor(classe, levels = c("I", "II", "III")),
tachas = factor(tachas, levels = c("Sim", "Não")),
regiao = factor(regiao, levels = c("Centro-Oeste", "Nordeste", "Norte", "Sudeste", "Sul")))
# p-valor function format
pvalue <- function(x) {
ifelse(x < .001, "p-valor < 0.001", glue("p-valor = {sprintf('%3.3f', x)}"))
}
bind_rows(
tibble(variavel = "relevo", descri = "Características de relevo da região", respostas = "Plano, Ondulado ou Montanhoso"),
tibble(variavel = "classe", descri = "Classe da rodovia", respostas = "0, I, II, II ou IV"),
tibble(variavel = "vmd", descri = "Volume médio diário", respostas = "VMD"),
tibble(variavel = "tachas", descri = "Presença de tachas refletivas ao longo da via", respostas = "Sim ou Não"),
tibble(variavel = "nfaixas", descri = "Número de faixas", respostas = "Número"),
tibble(variavel = "regiao", descri = "Região geográfica da via", respostas = "Centro-Oeste, Nordeste, Norte, Sudeste ou Sul"),
tibble(variavel = "area", descri = "Área da via", respostas = "Metros quadrados")) %>%
datatable(colnames = c("Variável", "Descrição", "Respostas"),
options = list(dom = "t"),
rownames = FALSE, caption = table_nums("famsi", "Variáveis explicativas"))
shiny::tags$br()
dados %>%
plot_ly() %>%
add_boxplot(y = ~preco, x = "", name = "boxplot") %>%
add_markers(y = ~preco, x = "", text = ~amostra, hoverinfo = "text", name = "outlier",
data = dados %>% filter(isOutlier(preco, 1.5))) %>%
layout(yaxis = list(title = "Preço")) %>%
config(displayModeBar = FALSE)
dados %>%
summarise(`Média` = mean(preco),
`Desvio padrão` = sd(preco),
Mediana = median(preco),
Iiq = quantile(preco, c(.25, .75), names = FALSE) %>% diff()) %>%
melt() %>%
datatable(colnames = c("Medidas", "Valores"),
options = list(dom = "t"),
rownames = FALSE, caption = table_nums("precosisum", "Medidas resumo da variável preço")) %>%
formatRound(columns = "value", digits = 2)
shiny::tags$br()
dados %>%
plot_ly() %>%
add_boxplot(y = ~vmd, x = "", name = "boxplot") %>%
add_markers(y = ~vmd, x = "", text = ~amostra, hoverinfo = "text", name = "outlier",
data = dados %>% filter(isOutlier(vmd, 1.5))) %>%
layout(yaxis = list(title = "VMD")) %>%
config(displayModeBar = FALSE)
dados %>%
plot_ly() %>%
add_boxplot(y = ~area, x = "", name = "boxplot") %>%
layout(yaxis = list(title = "Área")) %>%
config(displayModeBar = FALSE)
dados %>%
select_if(is.factor) %>%
names() %>%
map_dfr(~ freq2(var = ., data = dados)) %>%
datatable(rownames = FALSE,
colnames = c("Variável", "Categoria", "N", "%"),
options = list(dom = "t", pageLength = 15),
caption = table_nums("tablesi", "Distribuição percentual das variáveis explicativas"))
shiny::tags$br()
cormat <- dados %>%
select(-c(amostra, preco, regiao, tachas)) %>%
as.data.frame() %>%
polycor::hetcor() %$% correlations
cormat[upper.tri(cormat, diag = TRUE)] <- NA
cormat %<>% .[-1, -ncol(.)]
cormat %>% round(3) %>%
plot_ly(x = row.names(.),
y = row.names(.),
type = "heatmap", z = .) %>%
layout(yaxis = list(autorange = "reversed")) %>%
config(displayModeBar = FALSE)
set.seed(568)
dados_train <- dados %>% filter(amostra != 30) %>% sample_frac(.8)
dados_test <- dados %>% filter(amostra != 30) %>% anti_join(dados_train, by = "amostra")
dados_train %>%
select(-c(amostra, preco, tachas)) %>%
map( ~lm(preco ~ .x, data = dados_train)) %>%
map(summary) %>%
map("fstatistic") %>%
enframe() %>%
rowwise() %>%
mutate(`p-value` = 1 - pf(value[1], value[2], value[3])) %>%
select(-value) %>%
datatable(rownames = FALSE,
colnames = c("Variável", "P-valor"),
options = list(dom = "t"),
caption = table_nums("modunisi", "Análise univariada")) %>%
formatRound(columns = "p-value", digits = 3)
shiny::tags$br()
model <-
dados_train %>%
lm(preco ~ relevo + classe + vmd + area, data = .)
model %>% summary() %>% broom::tidy()
dados_train %>%
select(-c(amostra, preco))
require(homals)
# análise
nlpca <-
dados_train %>%
select(-c(amostra, preco)) %>%
mutate_if(is.numeric, scale) %>%
as.data.frame() %>%
homals(data = ., ndim = 2, rank = 1,
level = c("nominal", "nominal", "numerical", "numerical", "nominal", "numerical"))
# cargas
cargas <-
nlpca$loadings %>%
enframe() %>%
rowwise() %>%
mutate(D1 = value[1], D2 = value[2]) %>% select(-value)
nlpca <-
dados_train %>%
select(-c(amostra, preco)) %>%
mutate_if(is.numeric, scale) %>%
as.data.frame() %>%
homals(data = ., ndim = 2, rank = 1,
level = c("nominal", "nominal", "numerical", "numerical", "nominal", "numerical"))
require(homals)
# análise
nlpca <-
dados_train %>%
select(-c(amostra, preco, tachas)) %>%
mutate_if(is.numeric, scale) %>%
as.data.frame() %>%
homals(data = ., ndim = 2, rank = 1,
level = c("nominal", "nominal", "numerical", "numerical", "nominal", "numerical"))
# cargas
cargas <-
nlpca$loadings %>%
enframe() %>%
rowwise() %>%
mutate(D1 = value[1], D2 = value[2]) %>% select(-value)
# autovalores
full_nlpca <-
dados_train %>%
mutate_if(is.numeric, scale) %>%
select(-c(amostra, preco, tachas)) %>% as.data.frame() %>%
homals(data = ., ndim = 6, rank = 1,
level = c("nominal", "nominal", "numerical", "numerical", "nominal", "numerical"))
autoval <- (full_nlpca$eigenvalues/sum(full_nlpca$eigenvalues) * 100) %>% sprintf("%2.1f", .)
cargas %>% plot_ly(x = ~D1, y = ~D2, text = ~name, hoverinfo = "text", opacity = 0,
width = 600, height = 500) %>%
config(displayModeBar = FALSE) %>%
add_annotations(x = ~D1,
y = ~D2,
xref = "x", yref = "y",
axref = "x", ayref = "y",
text = "",
showarrow = T,
ax = ~0,
ay = ~0) %>%
layout(xaxis = list(title = glue("Componente 1 ({autoval[1]})")),
yaxis = list(title = glue("Componente 2 ({autoval[2]})")))
29 + 24.9
categorias <-
nlpca$catscores %>%
enframe()
getDatacat <- function(x) {
categorias %>%
filter(name == x) %>%
pull(value) %>%
as.data.frame() %>%
rownames_to_column(var = "categor")}
plot_ly() %>%
config(displayModeBar = FALSE) %>%
add_markers(~D1, ~D2, data = getDatacat("relevo"), name = "relevo", text = ~categor, hoverinfo = "text") %>%
add_markers(~D1, ~D2, data = getDatacat("classe"), name = "classe", text = ~categor, hoverinfo = "text") %>%
add_markers(~D1, ~D2, data = getDatacat("vmd"), name = "vmd", text = ~categor, hoverinfo = "text") %>%
add_markers(~D1, ~D2, data = getDatacat("nfaixas"), name = "nfaixas", text = ~categor, hoverinfo = "text") %>%
add_markers(~D1, ~D2, data = getDatacat("regiao"), name = "regiao", text = ~categor, hoverinfo = "text") %>%
add_markers(~D1, ~D2, data = getDatacat("area"), name = "area", text = ~categor, hoverinfo = "text") %>%
layout(xaxis = list(title = glue("Componente 1")),
yaxis = list(title = glue("Componente 2")))
cormat <- dados %>%
select(-c(amostra, preco, regiao, tachas)) %>%
as.data.frame() %>%
polycor::hetcor() %$% correlations
cormat[upper.tri(cormat, diag = TRUE)] <- NA
cormat %<>% .[-1, -ncol(.)]
cormat %>% round(3) %>%
plot_ly(x = row.names(.),
y = row.names(.),
type = "heatmap", z = .) %>%
layout(yaxis = list(autorange = "reversed")) %>%
config(displayModeBar = FALSE)
cormat <- dados %>%
select(-c(amostra, preco, regiao, tachas)) %>%
as.data.frame() %>%
polycor::hetcor() %$% correlations
cormat
cormat[upper.tri(cormat, diag = TRUE)] <- NA
cormat
cormat %<>% .[-1, -ncol(.)]
cormat
cormat %>% round(3) %>%
plot_ly(x = row.names(.),
y = row.names(.),
type = "heatmap", z = .) %>%
layout(yaxis = list(autorange = "reversed")) %>%
config(displayModeBar = FALSE)
cormat
rownames()
rownames
row.names
cormat <- dados %>%
select(-c(amostra, preco, regiao, tachas)) %>%
as.data.frame() %>%
polycor::hetcor() %$% correlations
cormat[upper.tri(cormat, diag = TRUE)] <- NA
cormat %<>% .[-1, -ncol(.)]
cormat %>% round(3) %>%
plot_ly(x = rownames(.),
y = colnames(.),
type = "heatmap", z = .) %>%
layout(yaxis = list(autorange = "reversed")) %>%
config(displayModeBar = FALSE)
cormat <- dados %>%
select(-c(amostra, preco, regiao, tachas)) %>%
as.data.frame() %>%
polycor::hetcor() %$% correlations
cormat
cormat[upper.tri(cormat, diag = TRUE)] <- NA
cormat
cormat <- dados %>%
select(-c(amostra, preco, regiao, tachas)) %>%
as.data.frame() %>%
polycor::hetcor() %$% correlations
cormat[upper.tri(cormat, diag = TRUE)] <- NA
cormat %<>% .[-1, -ncol(.)]
cormat %>% round(3) %>%
plot_ly(x = colnames(.),
y = rownames(.),
type = "heatmap", z = .) %>%
layout(yaxis = list(autorange = "reversed")) %>%
config(displayModeBar = FALSE)
dados %>% count(nfaixas)
model1 <-
dados_train %>%
lm(preco ~ relevo + vmd + area, data = .)
model1 %>% summary()
load("C:/Users/thiago.pires/OneDrive - FGV/DNIT/Analysis/Sinalização/Sinalização - 1a tentativa.RData")
View(Sinalizacao_Construcao_e_Validacao_sem_30)
rec1
summaru(rec1)
summary(rec1)
model1 <-
dados_train %>%
lm(preco ~ 0 + relevo + vmd + area, data = .)
model1 %>% summary()
model1 <-
dados_train %>%
lm(preco ~ relevo + vmd + area, data = .)
model1 %>% summary()
library(rthop)
install.packages("titanic")
install.packages("httr")
crosstab <- function(data, x, y, simulate.p.value = FALSE) {
table <-
data %>%
count({{x}}, {{y}}) %>%
group_by({{y}}) %>%
mutate(perc = round(n/sum(n, na.rm = TRUE) * 100, 2)) %>%
ungroup() %>%
mutate(z = glue("{n} ({perc %>% round(1)}%)") %>% as.character()) %>%
select(-c(n, perc)) %>%
pivot_wider(names_from = {{y}}, values_from = z, values_fill = list(z = "0 (0%)")) %>%
rename(Levels = {{x}})
contig_table <-
data %>%
select({{x}}, {{y}}) %>%
as.data.frame() %>%
table()
chisq_test <-
contig_table %>%
chisq.test()
validate <-
((chisq_test %$% expected) < 5) %>%
mean() * 100
fisher_test <-
contig_table %>%
fisher.test(simulate.p.value = simulate.p.value)
tibble(Variable = quo_name(quo({{x}}))) %>%
bind_rows(tibble(Variable = rep(NA, nrow(table) - 1))) %>%
bind_cols(table) %>%
mutate(Variable = ifelse(is.na(Variable), NA, Variable)) %>%
bind_cols(
`P-value` = c(chisq_test %$% p.value %>% round(4),
glue::glue("{validate}% < 5 (Fisher = {fisher_test %$% p.value %>% round(4)})"),
rep("", nrow(table) - 2))
)
}
install.packages("httr")
devtools::install_github(repo = 'rCarto/photon')
install.packages("remotes")
remotes::install_github(repo = 'rCarto/photon')
require(photon)
library(rthop)
library(rthop)
%$%
datasets::morley
datasets::morley %$% Expt
require(tidyr)
datasets::morley %$% Expt
require(magrittr)
datasets::morley %$% Expt
remotes::install_github("yihui/tinytex")
install.packages("devtools")
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
remove.packages("rthop", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
rm(list = c("crosstab"))
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
library(rthop)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(rthop)
library(dplyr)
dataset <-
titanic::titanic_train %>%
select(Survived, Pclass, Sex, Embarked) %>%
mutate_all(as.factor) %>%
filter(Sex != "", Embarked != "")
c("Survived", "Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ freq(dataset, !! rlang::sym(.x)))
c("20950240", "20090003", "22230090") %>%
purrr::map_dfr(~cep2coo(.x))
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived, TRUE))
dataset %>% select(Embarked, Survived) %>% table()
dataset %>% select(Embarked, Survived) %>% table() %>% chisq.test()
dataset %>% select(Embarked, Survived) %>% na.omit() %>% table() %>% chisq.test()
dataset %>% select(Embarked, Survived) %>% na.omit()
dataset %>% count(Embarked, Survived)
dataset %>% select(Embarked, Survived) %>% table() %>% chisq.test()
dataset %>% select(Embarked, Survived) %>% table()
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
library(rthop)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
crosstab()
crosstab
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
library(rthop)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
require(rthop)
detach("package:rthop", unload = TRUE)
remove.packages("rthop", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
library(rthop)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
rthop
rthop::crosstab
library(rthop)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
crosstab
library(rthop)
dataset %>% table(Survived, Embarked)
dataset %$% table(Survived, Embarked)
library(rthop)
library(dplyr)
dataset <-
titanic::titanic_train %>%
select(Survived, Pclass, Sex, Embarked) %>%
mutate_all(as.factor) %>%
filter(Sex != "", Embarked != "")
c("Survived", "Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ freq(dataset, !! rlang::sym(.x)))
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
dataset %$% table(Survived, Embarked)
dataset %>% count(Embarked)
dataset %$% table(Survived, Embarked)
library(rthop)
library(dplyr)
dataset <-
titanic::titanic_train %>%
select(Survived, Pclass, Sex, Embarked) %>%
filter(Sex != "", Embarked != "") %>%
mutate_all(as.factor)
c("Survived", "Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ freq(dataset, !! rlang::sym(.x)))
dataset %$% table(Survived, Embarked)
roxygen2::roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
library(rthop)
library(rthop)
library(rthop)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(rthop)
library(dplyr)
dataset <-
titanic::titanic_train %>%
select(Survived, Pclass, Sex, Embarked) %>%
filter(Sex != "", Embarked != "") %>%
mutate_all(as.factor)
c("Survived", "Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ freq(dataset, !! rlang::sym(.x)))
c("Pclass", "Sex", "Embarked") %>%
purrr::map_dfr(~ crosstab(dataset, !! rlang::sym(.x), Survived))
usethis::use_lifecycle_badge("exper")
usethis::use_lifecycle_badge(stage = "Experimental")
detach("package:dplyr", unload = TRUE)
install.packages("lintr")
usethis::use_github_actions_badge()
usethis::use_github_actions()
?remotes::install_deps
?rcmdcheck::rcmdcheck
?remotes::install_deps
?rthop::crosstab
?rthop::freq
?rthop::crosstab
?rthop::cep2coo
